class Token
{
    static final String TYPE_ID  = "id";
    static final String TYPE_NUM = "num";

    String lexeme;
    String tipo;
    String atributo;
    int    linha;
    int    coluna;

    Token(String lexeme, String tipo, String atributo, int linha)
    {
        this.lexeme   = lexeme;
        this.tipo     = tipo;
        this.atributo = atributo;
        this.linha    = linha;
        this.coluna   = coluna;
    }

    boolean referenciavel()
    {
        return (this.tipo.equals(TYPE_ID) || this.tipo.equals(TYPE_NUM));
    }

    boolean comparaTokens(Token b)
    {
        return (this.tipo.equals(b.tipo) && this.lexeme.equals(b.lexeme));
    }

    String string()
    {
        return "l: \"" + this.lexeme + "\", t: " + this.tipo + ", a: "  + this.atributo;
    }
}

%%

DIGIT   = [0-9]
LETTER  = [a-zA-ZçÇãÃé]
WS      = [ \t\n\f\r]     
SPECIAL = [\]\[\{\}*+/;-<=>,]
WS2     = [ \t\f\r]     

NUM       = {DIGIT}{DIGIT}*
ID        = {LETTER}{LETTER}*
BANIDOS   = [.`&?:!~]
EXCLUIDOS = [^A-Za-z0-9]
ANY       = {LETTER}|{DIGIT}|{WS}|{BANIDOS}|{SPECIAL}|\-

%unicode 
%function next_token
%type Token
%line

%%

{WS}+  { }
if     { return new Token(yytext(), "if"    , "", yyline); }
then   { return new Token(yytext(), "then"  , "", yyline); }
else   { return new Token(yytext(), "else"  , "", yyline); }
int    { return new Token(yytext(), "int"   , "", yyline); }
while  { return new Token(yytext(), "while" , "", yyline); }
return { return new Token(yytext(), "return", "", yyline); }
void   { return new Token(yytext(), "void"  , "", yyline); }
{ID}   { return new Token(yytext(), Token.TYPE_ID , "", yyline); }
{NUM}  { return new Token(yytext(), Token.TYPE_NUM, "", yyline); }

(/\*)({ANY})*((/\*)|(\*/)|<<EOF>>)({ANY})*(\*/) { return new Token(yytext(), "ERROR" , "COM", yyline); }

"*"  { return new Token(yytext(), "mul", "MUL", yyline);  }
"/"  { return new Token(yytext(), "mul", "DIV", yyline);  }
"+"  { return new Token(yytext(), "soma", "SUM", yyline); }
"-"  { return new Token(yytext(), "soma", "SUB", yyline); }

"<"  { return new Token(yytext(), "relop", "LT", yyline); }
"<=" { return new Token(yytext(), "relop", "LE", yyline); }
">"  { return new Token(yytext(), "relop", "GT", yyline); }
">=" { return new Token(yytext(), "relop", "GE", yyline); }
"==" { return new Token(yytext(), "relop", "EQ", yyline); }
"!=" { return new Token(yytext(), "relop", "NQ", yyline); }

"="  { return new Token(yytext(), "att", "", yyline); }
";"  { return new Token(yytext(), "end", "", yyline); }
","  { return new Token(yytext(), "sep", "", yyline); }

"{"  { return new Token(yytext(), "scope", "SCOPEOPEN", yyline); }
"}"  { return new Token(yytext(), "scope", "SCOPECLOSE", yyline); }
"("  { return new Token(yytext(), "scope", "ARGOPEN", yyline); }
")"  { return new Token(yytext(), "scope", "ARGCLOSE", yyline); }
"["  { return new Token(yytext(), "scope", "LISTOPEN", yyline); }
"]"  { return new Token(yytext(), "scope", "LISTCLOSE", yyline); }

{BANIDOS} { return new Token(yytext(), "ERROR", "", yyline); }